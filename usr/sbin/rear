#!/bin/bash
# $Id$
#
# Relax-and-Recover
#
#    Relax-and-Recover is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.

#    Relax-and-Recover is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.

#    You should have received a copy of the GNU General Public License
#    along with Relax-and-Recover; if not, write to the Free Software
#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#
# Authors:
# Schlomo Schapiro <rear at schlomo.schapiro dot org> [GSS]
# Gratien D'haese  <gdha at sourceforge dot net> [GD]
# Jeroen Hoekx <jeroen.hoekx at hamok dot be> [JH]
# Dag Wieers <dag at wieers dot com> [DAG]

# Enable as needed for development of fail-safe code:
# set -xvue -o pipefail
# set -ue -o pipefail
# Cf. the Relax-and-Recover Coding Style
# https://github.com/rear/rear/wiki/Coding-Style
# that reads (excerpt - dated 18. Nov. 2015):
# "TODO Use set -eu to die from unset variables and unhandled errors"

# Versioning
PRODUCT="Relax-and-Recover"
PROGRAM=${0##*/}
VERSION=1.17.2
RELEASE_DATE=Git

STARTTIME=$SECONDS

# Allow workflows to set the exit code to a different value.
EXIT_CODE=0

# Find out if we're running from checkout
REAR_DIR_PREFIX=""
SCRIPT_FILE="$( readlink -f $( type -p "$0" || echo "$0" ) )"
if test "$SCRIPT_FILE" != "$( readlink -f /usr/sbin/$PROGRAM )" ; then
    REAR_DIR_PREFIX=${SCRIPT_FILE%/usr/sbin/$PROGRAM}
fi

# Program directories - they must be set here. Everything else is then dynamic
SHARE_DIR="$REAR_DIR_PREFIX/usr/share/rear"
CONFIG_DIR="$REAR_DIR_PREFIX/etc/rear"
VAR_DIR="$REAR_DIR_PREFIX/var/lib/rear"
LOG_DIR="$REAR_DIR_PREFIX/var/log/rear"
CMD_OPTS=( "$@" )

# initialize defaults: empty value means "false"/"no"
DEBUG=""
DEBUGSCRIPTS=""
DEBUGSCRIPTS_ARGUMENT=""
KEEP_BUILD_DIR=""
RECOVERY_MODE=""
STEPBYSTEP=""
SIMULATE=""
VERBOSE=""
WORKFLOW=""

# Parse options
help_note_text="Use '$PROGRAM --help' or 'man $PROGRAM' for more information."
OPTS="$( getopt -n $PROGRAM -o "c:dDhsSvVr:" -l "help,version,debugscripts:" -- "$@" )"
if test $? -ne 0 ; then
    echo "$help_note_text"
    exit 1
fi
eval set -- "$OPTS"
while true ; do
    case "$1" in
        (-h|--help)
            WORKFLOW="help"
            ;;
        (-V|--version)
            echo -e "$PRODUCT $VERSION / $RELEASE_DATE"
            exit 0
            ;;
        (-v)
            VERBOSE=1
            ;;
        (-c)
            if [[ "$2" == -* ]] ; then
                # When the item that follows '-c' starts with a '-'
                # it is considered to be the next option and not an argument for '-c':
                echo "-c requires an argument."
                echo "$help_note_text"
                exit 1
            fi
            CONFIG_DIR="$2"
            shift
            ;;
        (-d)
            DEBUG=1
            VERBOSE=1
            ;;
        (-D)
            DEBUGSCRIPTS=1
            ;;
        (--debugscripts)
            DEBUG=1
            VERBOSE=1
            DEBUGSCRIPTS=1
            if [[ "$2" == -* ]] ; then
                # When the item that follows '--debugscripts' starts with a '-'
                # it is considered to be the next option and not an argument for '--debugscripts':
                echo "--debugscripts requires an argument."
                echo "$help_note_text"
                exit 1
            fi
            DEBUGSCRIPTS_ARGUMENT="$2"
            shift
            ;;
        (-s)
            SIMULATE=1
            VERBOSE=1
            ;;
        (-S)
            STEPBYSTEP=1
            ;;
        (-r)
            if [[ "$2" == -* ]] ; then
                # When the item that follows '-r' starts with a '-'
                # it is considered to be the next option and not an argument for '-r':
                echo "-r requires an argument."
                echo "$help_note_text"
                exit 1
            fi
            KERNEL_VERSION="$2"
            shift
            ;;
        (--)
            shift
            break
            ;;
        (-*)
            echo "$PROGNAME: unrecognized option '$option'"
            echo "$help_note_text"
            exit 1
            ;;
        (*)
            break
            ;;
    esac
    shift
done

# set workflow to first command line argument or to usage
if test -z "$WORKFLOW" ; then
    # usually workflow is now in $1 (after the options and its arguments were shifted above)
    # but when rear is called without a workflow there exists no $1 here so that
    # an empty default value is used to avoid 'set -eu' error exit if $1 is unset:
    if test -n "${1:-}" ; then
        # not "$1" to get rid of compound commands
        WORKFLOW=$1
        shift
    else
        WORKFLOW=help
    fi
fi

# keep the remaining command line arguments to feed to the workflow
ARGS=( "$@" )

# the following workflows are always verbose
case "$WORKFLOW" in
    (validate|dump|shell|recover)
        VERBOSE=1
	;;
esac

# Make sure we have the necessary paths (eg. in cron), /sbin will be the first path to search.
# some needed binaries are in /lib/udev or /usr/lib/udev
for path in /usr/bin /bin /usr/sbin /sbin ; do
    case ":$PATH:" in
        (*:"$path":*)
            ;;
        (*)
            if test -d "$path" ; then
                PATH=$path:$PATH
            fi
            ;;
    esac
done
PATH=$PATH:/lib/udev:/usr/lib/udev

# are we root ?
if test "$( id --user )" != "0" ; then
    echo "ERROR: $PRODUCT needs ROOT privileges!" >&2
    exit 1
fi

# set some bash options
shopt -s nullglob extglob
hash -r

# make sure that we use only english
export LC_CTYPE=C LC_ALL=C LANG=C

# include default config
source $SHARE_DIR/conf/default.conf

# include functions
for script in $SHARE_DIR/lib/*.sh ; do
    source $script
done

# LOCKLESS_WORKFLOWS can run simultaneously with another instance by using a LOGFILE.lockless:
if IsInArray "$WORKFLOW" "${LOCKLESS_WORKFLOWS[@]}" ; then
    LOGFILE="$LOGFILE.lockless"
else
    # when this currently running instance is not one of the LOCKLESS_WORKFLOWS
    # then it cannot run simultaneously with another instance
    # in this case pidof is needed to test what running instances there are:
    if ! has_binary pidof ; then
        echo "ERROR: Required program 'pidof' missing, please check your PATH" >&2
        exit 1
    fi
    # for unknown reasons '-o %PPID' does not work for pidof at least in SLES11
    # so that a manual test is done to find out if another pid != $$ is running:
    for pid in $( pidof -x "$SCRIPT_FILE" ) ; do
        if test "$pid" != $$ ; then
            echo "ERROR: $PROGRAM is already running, not starting again" >&2
            exit 1
        fi
    done
fi

# keep old log file
if test -r "$LOGFILE" ; then
    mv -f "$LOGFILE" "$LOGFILE".old 2>&8
fi
mkdir -p $LOG_DIR

exec 2>"$LOGFILE" || echo "ERROR: Could not create $LOGFILE" >&2
# keep our default $LOGFILE location in a seperate variable REAR_LOGFILE
# in case end-user overruled it in the local.conf file
REAR_LOGFILE="$LOGFILE"

if test "$WORKFLOW" != "help" ; then
    LogPrint "$PRODUCT $VERSION / $RELEASE_DATE"
    Log "Command line options: $0 ${CMD_OPTS[@]}"
    if test -n "$VERBOSE" ; then
        LogPrint "Using log file: $LOGFILE"
    fi
fi

v=""
verbose=""
# enable progress subsystem only in verbose mode, set some stuff that others can use
if test -n "$VERBOSE" ; then
    source $SHARE_DIR/lib/progresssubsystem.nosh
    v="-v"
    verbose="--verbose"
fi

# enable debug output of the progress pipe
if test -n "$DEBUG" ; then
    KEEP_BUILD_DIR=1
fi

# check if we are in recovery mode
if test -e "/etc/rear-release" ; then
    RECOVERY_MODE="y"
fi

if test -n "$SIMULATE" ; then
    LogPrint "Simulation mode activated, Relax-and-Recover base directory: $SHARE_DIR"
fi

if test -n "$DEBUGSCRIPTS_ARGUMENT" ; then
    Debug "Current set of flags is '$-'"
    Debug "The debugscripts flags are '$DEBUGSCRIPTS_ARGUMENT'"
fi

# All workflows need to read the configurations first.
# Combine configuration files
Debug "Combining configuration files"
# use this file to manually override the OS detection
test -r "$CONFIG_DIR/os.conf" && Source "$CONFIG_DIR/os.conf" || true
test -r "$CONFIG_DIR/$WORKFLOW.conf" && Source "$CONFIG_DIR/$WORKFLOW.conf" || true
SetOSVendorAndVersion
# distribution configuration files
for config in "$ARCH" "$OS" \
        "$OS_MASTER_VENDOR" "$OS_MASTER_VENDOR_ARCH" "$OS_MASTER_VENDOR_VERSION" "$OS_MASTER_VENDOR_VERSION_ARCH" \
        "$OS_VENDOR" "$OS_VENDOR_ARCH" "$OS_VENDOR_VERSION" "$OS_VENDOR_VERSION_ARCH" ; do
    test -r "$SHARE_DIR/conf/$config.conf" && Source "$SHARE_DIR/conf/$config.conf" || true
done
# user configuration files, last thing is to overwrite variables if we are in the rescue system
for config in site local rescue ; do
    test -r "$CONFIG_DIR/$config.conf" && Source "$CONFIG_DIR/$config.conf" || true
done

SourceStage "init"

# check for requirements, do we have all required binaries ?
# without the empty string as initial value MISSING_PROGS would be
# an unbound variable that would result an error exit if 'set -eu' is used:
MISSING_PROGS=("")
for f in "${REQUIRED_PROGS[@]}" ; do
    if ! has_binary "$f" ; then
        MISSING_PROGS=( "${MISSING_PROGS[@]}" "$f" )
    fi
done
if test -n "$MISSING_PROGS" ; then
    Error "Cannot find required programs: ${MISSING_PROGS[@]}"
fi

VERSION_INFO="
$PRODUCT $VERSION / $RELEASE_DATE

$PRODUCT comes with ABSOLUTELY NO WARRANTY; for details see
the GNU General Public License at: http://www.gnu.org/licenses/gpl.html

Host $( uname -n ) using Backup $BACKUP and Output $OUTPUT
Build date: $( date -R )
"

if test "$WORKFLOW" != "help" ; then
    # create temporary work area and register removal exit task
    BUILD_DIR="$( mktemp -d -t rear.XXXXXXXXXXXXXXX || Error "Could not create build area '$BUILD_DIR'" )"
    QuietAddExitTask cleanup_build_area_and_end_program
    Log "Using build area '$BUILD_DIR'"
    ROOTFS_DIR=$BUILD_DIR/rootfs
    TMP_DIR=$BUILD_DIR/tmp
    mkdir -p $v $ROOTFS_DIR >&2 || Error "Could not create $ROOTFS_DIR"
    mkdir -p $v $TMP_DIR >&2 || Error "Could not create $TMP_DIR"
fi

# Check for and run the requested workflow
if has_binary WORKFLOW_$WORKFLOW ; then
    Log "Running $WORKFLOW workflow"
    # there could be no ARGS[@] which means it would be an unbound variable so that
    # an empty default is used here to avoid an error exit if 'set -eu' is used:
    WORKFLOW_$WORKFLOW "${ARGS[@]:-}"
    Log "Finished running $WORKFLOW workflow"
else
    VERBOSE=1
    LogPrint "ERROR: The specified command '$WORKFLOW' does not exist!"
    EXIT_CODE=1
fi

if test "$REAR_LOGFILE" != "$LOGFILE" ; then
    cat "$REAR_LOGFILE" > "$LOGFILE"
fi

if test $EXIT_CODE -eq 0 ; then
    LogToSyslog "DONE: rc=$EXIT_CODE"
fi

exit $EXIT_CODE

